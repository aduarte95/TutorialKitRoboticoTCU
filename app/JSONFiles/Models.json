{
  "Micropiano" : {
    "Id": "1",
    "Descripcion": "<br><b> Metas </b></br> &bull; Elaborar un instrumento electrónico para las clases de música/tecnología.<br> &bull; Ayudar en el aprendizaje de los jóvenes respecto a programación. <br> &bull; Explicar la creación de sonidos por medio de la frecuencia. <br> <br><b>Funcionamiento </b></br> Construcción de un micro piano utilizando Arduino, el cual permita la creación de sonidos con base en los intereses del usuario. El alcance de producción de sonido depende de la cantidad de botones que se añadan (mínimo 7)." ,
    "Imagen": "images/paso4micropiano.jpg",
    "CantidadComponentes": ["1","7","1","7","18","1", "1"],
    "Components": [
      "Arduino Uno",
      "Botón",
      "Buzzer",
      "Resistencia",
      "Cable",
      "Breadboard",
      "Cubierta de micropiano"
    ],
    "Pasos": [
      {
        "Encabezado": "Paso 1: Conectar circuito de energía a riel lateral del breadboard",
        "Descripcion": "<br> &bull; Conectar la salida de 5V al riel marcado como positivo en el breadboard. <br> &bull; Conectar cualquiera de las tres tierras (GRND) al riel marcado como negativo en el breadboard.<br>",
        "Image": "images/guiaPiano.jpg"
      },
      {
        "Encabezado": "Paso 2: Conectar la bocina",
        "Descripcion": "<br> &bull; Conectar cualquiera de los conectores a un pin digital (pin 12 en el ejemplo). <br> &bull; Conectar el otro conector al riel de tierra. <br>",
        "Image": "images/guiaPiano.jpg"
      },
      {
        "Encabezado": "Paso 3:  Conectar los botones (repetir 7 veces, una para cada botón)",
        "Descripcion": " <br> &bull; Colocar el botón con dos de sus patas en una mitad de la breadboard y las otras dos en la otra mitad. <br> &bull; De las primeras dos patas conectar una a una resistencia de 10K Ω y la resistencia a su vez al riel de 5V, la otra pata conectarse al riel de tierra. <br> &bull; Conectar una de las patas del otro extremo a un pin digital (en el caso del ejemplo se coloca el botón correspondiente a la nota Do al pin 2, Re al pin 3 y así hasta la nota Si en el pin 8).<br> ",
        "Image": "images/guiaPiano.jpg"
      },
      {
        "Encabezado": "Paso 4: Colocar la cubierta del micropiano",
        "Descripcion": "Después haber conectado todos los componentes, coloque la cubierta del micropiano sobre la breadboard como se muestra en la imagen.</br>",
        "Image": "images/paso4micropiano.jpg"
      },
      {
        "Encabezado": "Paso 5: Escribir código",
        "Descripcion": "<br><b> Si se está usando Arduino IDE ingresar el siguiente codigo al arduino:</b></br></br><pre><code>const int boton_0 = 2; // se establece una constante entera “boton_0” en el pin 2 <br> const int boton_1 = 3;\n const int boton_2 = 4;\n const int boton_3 = 5;\n const int boton_4 = 6;\n const int boton_5 = 7;\n const int boton_6 = 8;\n const int zumbador = 12;\n\n  void setup () \n{\n \tpinMode (boton_0, INPUT); // se establece “boton_0” (equivalente al pin 2) como entrada\n \tpinMode (boton_1, INPUT);\n \tpinMode (boton_2, INPUT);\n \tpinMode (boton_3, INPUT);\n \tpinMode (boton_4, INPUT);\n \tpinMode (boton_5, INPUT);\n \tpinMode (boton_6, INPUT);\n \tpinMode (zumbador, OUTPUT); // se establece “zumbador” (pin 12) como una salida\n \n}\n\n  void loop () \n{\n \tif (digitalRead (boton_0) == false) \n\t{ // si se presiona el boton_0 se corren las instrucciones\n \t\ttone (zumbador, 261, 100); // el 261 es la frecuencia que equivale a la nota Do\n \t\tdelay (100); // espera de 100 milisegundos que equivalen a 0,1 segundos\n \n\t}\n\n \tif (digitalRead (boton_1) == true) \n\t{\n  \t\ttone (zumbador, 293, 100); // el 293 es la frecuencia que equivale a la nota Re\n \t\tdelay (100);\n \n\t}\n\n \tif (digitalRead (boton_2) == true) \n\t{\n  \t\ttone (zumbador, 329, 100); // el 329 es la frecuencia que equivale a la nota Mi\n \t\tdelay (100);\n \n\t}\n\n \tif (digitalRead (boton_3) == true) \n\t{\n  \t\ttone (zumbador, 349, 100); // el 349 es la frecuencia que equivale a la nota Fa\n \t\tdelay (100);\n \n\t}\n\n \tif (digitalRead (boton_4) == true) \n\t{\n  \t\ttone (zumbador, 392, 100); // el 392 es la frecuencia que equivale a la nota Sol\n \t\tdelay (100);\n \n\t}\n\n \tif (digitalRead (boton_5) == true) \n\t{\n  \t\ttone (zumbador, 440, 100); // el 440 es la frecuencia que equivale a la nota La\n \t\tdelay (100);\n \n\t}\n\n \tif (digitalRead (boton_6) == true) \n\t{\n  \t\ttone (zumbador, 494, 100); // el 494 es la frecuencia que equivale a la nota Si\n \t\tdelay (100);\n \n\t} \n}  </code></pre><br> Créditos de la foto: Fabián Alexis [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)] via Wikimedia Commons",
        "Image": "images/arduinoLogo.png"
      },
      {
        "Encabezado": "Paso 6",
        "Descripcion": "<br>Si se esta usando BitBlog, los bloques deben quedar como los bloques en la imagen anexa</br> <br> ",
        "Image": "images/bitblogPiano.png"
      }
    ]
  },

  "Nivel0" : {
    "Id": "1",
    "Descripcion": "<b>Metas</b><br> &bull; Aprender el funcionamiento básico de los materiales a utilizar en el kit.<br> &bull; Comprender la programación en Arduino mediante el programa Arduino IDE y por medio de bloques en Bitbloq.<br> &bull; Conocer la estructura básica de una programación de Arduino, así como las distintas funciones para dar instrucciones.<br> &bull; Realizar ejercicios para visualizar el funcionamiento de los distintos materiales y estructuras creadas con estos, mediante un código de programación. <br><br> <b>Funcionamiento</b><br>Los tutoriales básicos pretenden enseñar al alumno los conceptos básicos de programación en Arduino con el fin de que se comprenda la importancia de la programación, ya que esta representa en menor escala, la automatización que se puede reproducir en un futuro para cumplir diversos objetivos.",
    "Imagen": "images/gears.png",
    "CantidadComponentes": ["1","1","1","1","1","1","1","1","1","1","1"],
    "Components": [
      "Resistencia",
      "Cable",
      "LED",
      "Botón",
      "Potenciómetro",
      "Sensor ultrasónico",
      "Fotoresistencia",
      "Servomotor",
      "Zumbador",
      "Placa de pruebas",
      "Arduino Uno"
    ],
    "Pasos": [
      {
        "Encabezado": "Uso de Arduino Uno",
        "Descripcion": "&bull; Explicar los pasos básicos iniciales de introducción al programa Arduino IDE, así como la programación en bloques en el programa Bitbloq. <br> &bull; Comprender la estructura básica de la programación de Arduino mediante las funciones “setup” y “loop”. <br> &bull; Llevar a cabo el ejercicio de encender y apagar una LED. <br> &bull; Utilizar un servo, y posteriormente incorporarle a este un potenciómetro. <br> &bull; Observar el funcionamiento de una fotoresistencia mediante un ejercicio de lectura de luminosidad. <br> &bull; Realizar un ejercicio con un sensor ultrasónico de medición de distancias. <br> &bull; Para cada uno de los ejercicios, se cuenta con una breve explicación, las variables y funciones detalladas, el código tanto en Arduino IDE comentado, como por bloques, un diagrama de flujo de las operaciones secuenciales y lógicas que sigue la programación, y las instrucciones para armar las respectivas estructuras, acompañadas de su correspondiente esquema de conexiones eléctricas.",
        "Image": "images/arduino.jpg"
      },
      {
        "Encabezado": "Pasos básicos iniciales – Arduino IDE",
        "Descripcion" : "El software de código abierto Arduino IDE (Integrated Development Environment, o en español Entorno de Desarrollo Integrado) facilita escribir código y cargarlo en la placa de Arduino. Este IDE permite a los desarrolladores escribir código, configurar tableros y crear proyectos. Es decir, es una plataforma de hardware libre, basada en una placa con un microcontrolador y un entorno de desarrollo, diseñada para facilitar el uso de la electrónica en proyectos multidisciplinarios.",
        "Image": "images/arduino.jpg"
      },
      {
        "Encabezado": "Paso 1",
        "Descripcion": "Conectar el Arduino Uno a la computadora mediante el cable USB.",
        "Image": "images/taller0-paso1.png"
      },
      {
        "Encabezado": "Paso 2",
        "Descripcion": " <style type=\"text/css\"> ol {list-style: none; counter-reset: li} li::before {content: counter(li); color: red;   display: inline-block; width: 1em;   margin-left: -1em} li {counter-increment: li}</style>Abrir el programa Arduino IDE.<br><br><b>Partes del IDE</b> <ol type=\"1\"> <li>VERIFICAR: Compila y aprueba el código. Atrapará los errores en la sintaxis (como los puntos y comas o paréntesis faltantes).</li> <li>CARGAR: Envía el código a la placa Arduino. Cuando se hace clic en él, se deberían ver las luces en el tablero parpadear rápidamente.</li> <li>NUEVO: Este botón abre una nueva pestaña de ventana de código.</li> <li>ABRIR: Este botón permitirá abrir un sketch existente.</li> <li>GUARDAR: Esto guarda el sketch actualmente activo.</li> <li>MONITOR DE SERIE: Esto abrirá una ventana que muestra cualquier información en serie que el Arduino está transmitiendo. Es muy útil para la depuración. </li> <li>NOMBRE DEL SKETCH: Esto muestra el nombre del sketch en el que se está trabajando actualmente.</li> <li>ÁREA DE CÓDIGO: Esta es el área donde se compone el código para el sketch.</li> <li>ÁREA DE MENSAJE: Aquí es donde el IDE indica si hubo algún error en el código. </li>  </ol>",
        "Image": "images/taller0-paso2.png"
      },
      {
        "Encabezado": "Paso 3",
        "Descripcion": "Seleccionar la placa: Arduino Uno.",
        "Image": "images/taller0-paso3.png"
      },
      {
        "Encabezado": "Paso 4",
        "Descripcion": "Seleccionar el puerto.",
        "Image": "images/taller0-paso4.png"
      },
      {
        "Encabezado": "Pasos básicos iniciales – Bitbloq",
        "Descripcion": "Bitbloq es una herramienta online que permite crear programas para un microcontrolador y cargarlos en el mismo de forma sencilla y sin tener necesariamente conocimientos de programación. Es de código abierto y puede usarse de forma gratuita, se requiere de un explorador basado en Chromium (Google Chrome, por ejemplo) para acceder a la herramienta. ",
        "Image": "images/bitbloq.jpg"
      },
      {
        "Encabezado": "Paso 1",
        "Descripcion": "Crear una cuenta en Bitbloq, todo es almacenado en la nube, puede ser compartido con otras cuentas o descargado para tener un respaldo local.",
        "Image": "images/taller0-bitbloq1.png"
      },
      {
        "Encabezado": "Paso 2",
        "Descripcion": "Página principal – Crear proyecto: La página principal muestra todos los proyectos asociados a una cuenta y permite la creación de nuevos proyectos.",
        "Image": "images/taller0-bitbloq2.png"
      },
      {
        "Encabezado": "Paso 3",
        "Descripcion": "Al seleccionar “Nuevo proyecto” la página te redirige a un proyecto en blanco, es una buena práctica darle al proyecto un nombre apropiado haciendo clic sobre “Proyecto sin título”,  los proyectos tienen tres secciones principales que pueden accederse en los íconos al lado izquierdo de la pantalla. Las secciones son hardware, en donde se seleccionan los componentes a utilizar, la sección software, en donde se crea el código de nuestro proyecto y la sección de información, en esta se le da una descripción al proyecto, se puede agregar un video del proyecto y cambiar los colores de los bloques de programación (opcional).",
        "Image": "images/taller0-bitbloq3.png"
      },
      {
        "Encabezado": "Paso 4",
        "Descripcion": "Una vez creado un proyecto lo primero que debe hacerse es agregar el microcontrolador a ser usado en el proyecto (en la sección “Placas”) para agregarlo solo debe arrastrarlo al área de trabajo, en el caso del Robokit se hace uso de un Arduino Uno, luego deben conectarse a este todos los componentes a usar en el proyecto (sección “Componentes”).",
        "Image": "images/taller0-bitbloq4.png"
      },
      {
        "Encabezado": "Paso 5",
        "Descripcion": "Una vez que todos los componentes están conectados a la placa, pasamos a la sección de software, en esta puede trabajarse mediante bloques o código de programación y también puede iniciar un proyecto en bloques y luego cambiar unos detalles en el código. El código se divide en tres secciones al igual que en un programa de código (ver sección “Estructura de un programa”) y en el panel derecho están todos los comandos que pueden ser agregados al código representados por bloques.",
        "Image": "images/taller0-bitbloq5.png"
      },
      {
        "Encabezado": "Paso 6",
        "Descripcion": "En la sección componentes aparecen todos los dispositivos que conectamos al Arduino en la sección de hardware, nótese que ciertos bloques usados en estos tutoriales se acceden haciendo clic en “Avanzados”, las demás secciones son equivalentes a lo expuesto en la sección de “Estructura de un programa”; para cargar un programa solamente debe hacer clic en la flecha en la parte superior derecha.",
        "Image": "images/taller0-bitbloq6.png"
      },
      {
        "Encabezado": "Estructura de un programa",
        "Descripcion": "La estructura básica en el lenguaje de programación de Arduino se compone de mínimo dos funciones específicas “setup” y “loop”. Ambas funciones encierran bloques que contienen declaraciones o instrucciones, como se muestra a continuación:<br><br><code>void setup ()</code><br> <code>{</code><br> <em>&nbsp;&nbsp;instrucciones</em><br> <code>}</code><br> <code>void loop ()</code><br> <code>{</code><br> <em>&nbsp;&nbsp;instrucciones</em><br> <code>}</code><br><br> Ambas funciones corren de manera automática cada vez que se enciende el Arduino o se reinicia, y son necesarias para que trabaje el programa.",
        "Image": "images/tutorial0-estructura.png"
      },
      {
        "Encabezado": "Entre llaves {}",
        "Descripcion": "Estas llaves “{}” tienen como objetivo definir el inicio y final de un bloque de instrucciones. Siempre deben aparecer ambas llaves, es decir, la de apertura y la de cierre; en caso contrario, el programa presenta errores. <br>Para asegurarse de que cada llave de apertura tiene su correspondiente de cierre, se debe hacer clic en el punto de inserción de la llave abierta y de manera inmediata se marca la llave de cierre relacionada a ese bloque.",
        "Image": "images/no-image.png"
      },
      {
        "Encabezado": "Punto y coma ;",
        "Descripcion": "El punto y coma “;” es utilizado para separar instrucciones. En caso de olvidar poner fin a una línea con un punto y coma, se obtendrá un error en la compilación.",
        "Image": "images/no-image.png"
      },
      {
        "Encabezado": "Linea de comentario //",
        "Descripcion": "<p>Para introducir un comentario o nota dentro del programa, se empieza la línea con “//”. Al escribirlo de esta manera, esa línea completa es ignorada por el programa (se encuentra deshabilitada).</p><p>Una línea de comentario es comúnmente utilizada después de una instrucción a manera de recordatorio sobre lo que hace esta. A manera de ejemplo se tiene:</p><em><b>// esto es un comentario</b></em>",
        "Image": "images/no-image.png"
      },
      {
        "Encabezado": "Bloque de comentarios /*...*/",
        "Descripcion": "<p>Estos bloques de comentarios son áreas completas de texto que son ignoradas por el programa, es decir, está conformada por un conjunto de líneas de comentario. Un ejemplo de esto:</p> <em><b>/*<br> esto es un bloque de comentario<br> no olvidar cerrar siempre los comentarios<br>*/</b></em>",
        "Image": "images/no-image.png"
      }
    ]
  },

  "Caballo" : {
    "Id": "2",
    "Descripcion": "Es un mecanismo de una sola entrada de moviemiento mediante el cual se simula el galope de un caballo. Su objetivo es básicamente ilustrar la anatomía del animal y como otros mamíferos se mueven de forma similar.",
    "Imagen": "images/theo.jpeg",
    "CantidadComponentes": [
      "1",
      "1",
      "2",
      "4",
      "2",
      "2",
      "1",
      "2",
      "1",
      "2"
    ],
    "Components": [
      "Cuerpo del Caballo",
      "Cabeza del Caballo",
      "Unión larga",
      "Unión corta",
      "Unión mediana",
      "Patas del Caballo",
      "Motor DC",
      "Cable",
      "Porta baterías",
      "Baterías AA"
    ],
    "Pasos": [
      {
        "Encabezado": "Paso 1",
        "Descripcion": "Primero debe ensamblarse el caballo según lo muestran las imágenes.",
        "Image": "images/cab1.jpg"
      },
      {
        "Encabezado": "Paso 2",
        "Descripcion": "",
        "Image": "images/cab2.jpg"
      },
      {
        "Encabezado": "Paso 3",
        "Descripcion": "",
        "Image": "images/cab3.jpg"
      },
      {
        "Encabezado": "Paso 4",
        "Descripcion": "",
        "Image": "images/cab4.jpg"
      },
      {
        "Encabezado": "Paso 5",
        "Descripcion": "",
        "Image": "images/cab5.jpg"
      },
      {
        "Encabezado": "Paso 6",
        "Descripcion": "",
        "Image": "images/cab6.jpg"
      },
      {
        "Encabezado": "Paso 7",
        "Descripcion": "",
        "Image": "images/cab7.jpg"
      },
      {
        "Encabezado": "Paso 8",
        "Descripcion": "Conecte el circuito al motor",
        "Image": "images/circuitocab.jpg"
      }
    ]
  },

  "Motor" : {
      "Id": "3",
      "Descripcion": "Consta de una estructura electromecánica capaz de mover objetos de poco peso. Emplea dos motores servos para ejecutar el movimiento y un Arduino como modo de control.",
      "Imagen": "images/mot.png",
      "CantidadComponentes": ["1","2","3"],
      "Components": [
        "Arduino Uno",
        "Servo Motor",
        "Led"
      ],
      "Pasos": [
        {
          "Encabezado": "Paso 1",
          "Descripcion": "Con este proyecto se pretende abarcar el tema de movimiento, fuerza y trabajo del MEP.",
          "Image": "../images/brazo.png"
        },
        {
          "Encabezado": "Paso 2",
          "Descripcion": "Can este proyecto se pretende abarcar el tema de movimiento, fuerza y trabajo del MEP.",
          "Image": "../images/brazo.png"
        },
        {
          "Encabezado": "Paso 3",
          "Descripcion": "Cen este proyecto se pretende abarcar el tema de movimiento, fuerza y trabajo del MEP.",
          "Image": "../images/brazo.png"
        }
      ]
  },

  "Generador" : {
    "Id": "4",
    "Descripcion": "<br><b> Metas </b></br> &bull; Introducir el concepto de energía y motores DC.<br> &bull; Introducir el concepto de valor medio de señales. <br> &bull; Introducir el concepto de regulación de velocidad. <br> <br><b>Funcionamiento </b></br> Dispositivo capaz de transformar energía eléctrica en energía mecánica (movimiento). Este proceso se realiza por medio de la acción de los campos magnéticos que generan las bobinas que están dentro del motor.",
    "Imagen": "images/Taller2/generador2.jpg",
    "CantidadComponentes": ["4","1","1","1","1","1","1", "7"],
    "Components": [
      "Baterías AA",
      "Porta baterías",
      "Motor DC",
      "Breadboard",
      "Turbina",
      "Arduino Uno",
      "Potenciómetro",
      "Cable"
    ],
    "Pasos": [
      {
        "Encabezado": "Armado del circuito",
        "Descripcion": "<br>Arme el ciurcuito mostrado en la figura.",
        "Image": "images/Taller2/Circuito.jpg"
      },
      {
        "Encabezado": "Armado",
        "Descripcion": "<br>Conectar la rueda al motor como se muestra.",
        "Image": "images/Taller2/Generador.png"
      },
      {
        "Encabezado": "Código",
        "Descripcion": "<br>Digite (o copie y pegue) el siguiente código en Arduino.<br><br><pre><code>#include &lt AFMotor.h&gt <br> #include&ltWire.h&gt<br>#include&ltAdafruit_MotorShield.h&gt<br><br>Adafruit_MotorShield AFMS = Adafruit_MotorShield(); // Crea el objeto controlador del motorshield<br><br>Adafruit_DCMotor *miMotor = AFMS.getMotor(1);// Selecciona en cual puerto del shield está motor(en este caso M1)<br><br>void setup() <br>{<br>  pinMode(A5,INPUT); //Pin de lectura del potenciómetro<br>  AFMS.begin(); //Conexión inicial con el shield<br>  miMotor->setSpeed(0); //Determina la velocidad del motor<br>  miMotor->run(FORWARD); //Determina la dirección de rotación del motor<br>}<br><br>void loop() <br>{<br>  int val = analogRead(A0);//Lee el valor del potenciómentro<br>  int intensidad = map(val,0,1023,0,255);<br>  miMotor->setSpeed(intensidad);//Ajusta la velocidad del motor<br>}<br></pre></code>",
        "Image": "images/Taller2/CodigoG.png"
      }
    ]
  },

  "Girabot" : {
    "Id": "3",
    "Descripcion": "Consta de una estructura electromecánica capaz de mover objetos de poco peso. Emplea dos motores servos para ejecutar el movimiento y un Arduino como modo de control.",
    "Imagen": "images/Taller3/girabot.jpg",
    "CantidadComponentes": ["1","1","2","1","1","11","1","1"],
    "Components": [
      "Arduino Uno",
      "Servomotor",
      "Fotoresistencia",
      "Tallo",
      "Flor",
      "Cable",
      "Breadboard",
      "Resistencia"
    ],
    "Pasos": [
      {
        "Encabezado": "Ensamble de la flor",
        "Descripcion": "Conecte la flor al tallo conectándolas en las uniones que ambas piezas presentan",
        "Image": "images/Taller3/piezasflor.JPG"
      },
      {
        "Encabezado": "Paso 2",
        "Descripcion": "Por debajo del tallo haga pasar 4 cables distintos hasta que sobresalgan 2 por cada rama del tallo. Con ayuda de uniones conecte cada par de cables a una fotoresistencia, con el fin de que sobresalgn una de cada de cada lado de la flor.",
        "Image": "images/Taller3/flor.JPG"
      },
      {
        "Encabezado": "Paso 3",
        "Descripcion": "Arme el circuito como muestra la figura, en el cual se conectan el arduino con el protoboard y este a su vez con los cables de la flor. Note que el servo también se encuentra presente.",
        "Image": "images/Taller3/circuitoflor.jpg"
      },
      {
        "Encabezado": "Paso 4",
        "Descripcion": "Digite (o copie y pegue) en Arduino el siguiente código: <br><br> <pre><code> #include &ltServo.h&gt <br> Servo servo; //Creación del objeto para usar la libreria <br> const int motor = 6; <br> int posicion=90; <br> int dato_Izquierda=0;//Dato sensor 1 <br> int dato_Derecha=0;//Dato sensor 2 <br> const int sensor1 = A1; // Sensor Izquierda <br> const int sensor2 = A2;//Sensor derecha <br><br> void setup() <br>{ //Configuraciones <br>  \tservo.attach(motor);//motor-->pin 6 <br>  \tservo.write(posicion); //centrar el motor(90*) <br>  \tpinMode(sensor1,INPUT);//Sensor--->entrada <br>  \tpinMode(sensor2,INPUT);//Sensor--->entrada <br>  \tSerial.begin(9600);// Iniciar el puerto serial <br> } <br><br> void loop() \n{<br> \tSerial.print(\"Posicion: \");\n \tSerial.print(posicion);\n \tSerial.println(\"*\");<br> \tdato_Izquierda = analogRead(sensor2);// guardo la lectura<br> \tdato_Derecha = analogRead(sensor1);<br>  \tSerial.println(dato_Izquierda);<br>  \tSerial.println(dato_Derecha);<br><br>  \tif(dato_Izquierda > dato_Derecha)<br>\t{<br>    \t\tif(posicion >= 10)<br>   \t\t{<br>      \t\t\tposicion = posicion -10 ; // Girar sentido anti horario<br>    \t\t}<br>  \t}<br><br>  \tif(dato_Izquierda < dato_Derecha)<br>  \t{<br>    \t\tif(posicion <= 170)<br>    \t\t{<br>      \t\t\tposicion = posicion + 10 ; // Girar sentido horario <br>     \t\t}  <br>\t} <br><br>   \tservo.write(posicion);<br>  \tdelay(10);<br>}<br></pre></code>",
        "Image": "images/Taller3/codflor.jpg"
      }
    ]
  },

  "BrazoMecanico" : {
    "Id" : "6",
    "Descripcion" :"<br><b> Metas </b></br> &bull; Introducir el concepto de sistema electromecánico. <br> &bull; Demostrar la interacción de diferente fuerzas en un sistema mecánico. <br> &bull; Enseñar a las y los estudiantes la importancia de la automatización de procesos.<br><br>Créditos de la foto y diseño: Heartman [CC BY-NC 3.0 (https://creativecommons.org/licenses/by-nc/3.0)] via Thingiverse",
    "Imagen" : "images/Taller4/7.png",
    "CantidadComponentes" : ["1", "1", "1", "2", "12", "1", "1", "1", "1", "1", "1", "1", "10"],
    "Components": [
    "Arduino Uno",
    "Servomotor",
    "Porta baterías",
    "Baterías AA",
    "Cable",
    "Módulo Bluetooth",
    "Base de brazo",
    "Unión entre base y eje primario",
    "Eje primario",
    "Eje secundario",
    "Base para pinza",
    "Pinza",
    "Tornillos M3"
    ],
    "Pasos": [
    {
    "Encabezado": "<br><b> Paso 1: Conexión del shield motor y control de los motores DC. </br></b>",
    "Descripcion": "Para conectar el módulo bluetooth con el Arduino se debe hacer uso de los pines digitales. Ya que no se sabe que tiene cargado el Arduino es importante primero programarlo y así prevenir voltajes de entrada indeseados en los componentes, además es importante verificar que el módulo bluetooth está vinculado al teléfono. Recordemos que la transmisión (abreviatura: Tx) va a nuestra recepción (abreviatura: Rx) y viceversa. Aunque el Modulo puede operar a 5V lo recomendable son los 3.3V para el ahorro de energía.\n Y como respuesta colocar un LED con una resistencia de 220 Ω del pin 12 a GND. La conexión del módulo Bluetooth debe quedar como se aprecia en la figura.",
    "Image": "images/Taller4/ConexionBlue.JPG"
    },
    {
    "Encabezado" :"<br><b> Paso 1.1: Para emplear el módulo Bluetooth se necesita utilizar el siguiente código. </br></b>",
    "Descripcion": "<pre><code> //bluetooth hc-06\n int ledPin = 12; // usamos un pin de salida al LED\n int state = 0; // Variable lectura serial  \n\n void setup() \n{  \n\t    pinMode(ledPin, OUTPUT);   //Declara pin de Salida  \n\t    digitalWrite(ledPin, LOW); //Normalmente Apagado  \n\t    Serial.begin(9600);\n} \n\n void loop() \n{\n\t //si el modulo a manda dato, guardarlo en estado.  \n\tif(Serial.available() > 0)\n\t{  \n\t\tstate = Serial.read();} // esta parte del codigo es para solo 1 Carácter o Unidad.  \n\t\t // si el estado es 0 ese seria Apagado  \n\n\t\t if (state == '0') \n\t\t{  \n\t\t\t     digitalWrite(ledPin, LOW);  \n\t\t\t     Serial.println(\"LED: off\");\n\t\t } // de lo contrario si el estado es 1 ese seria Encendido  \n\t} \n\telse\n\t {  \n\t\tif (state == '1') \n\t\t{ \n\t\t\t      digitalWrite(ledPin, HIGH);  \n\t\t\t      Serial.println(\"LED: on\");\n\t\t}\n\t}\n}",
    "Image": "images/no-image.png"
    },
    {
    "Encabezado" :"<br><b> Paso 2: Conexión mecánica. </br></b>",
    "Descripcion": " Los pasos a seguir para la correcta construcción del brazo son los siguientes: \n    ",

    "Image": "images/no-image.png"
    },
    {
    "Encabezado": "<br><b> Paso 2.1: Conexión mecánica. </br></b>",
    "Descripcion":"Colocar un servomotor en la base del brazo." ,
    "Image": "images/Taller4/8.jpg"
    },
    {
    "Encabezado": "<br><b> Paso 2.2: Conexión mecánica. </br></b>",
    "Descripcion":"Conectar la pieza de unión entre base y eje primario  al servo.<br><br>Créditos de la foto: Heartman [CC BY-NC 3.0 (https://creativecommons.org/licenses/by-nc/3.0)] via Thingiverse" ,
    "Image": "images/Taller4/4.jpg"
    },
    {
    "Encabezado": "<br><b> Paso 2.3: Conexión mecánica. </br></b>",
    "Descripcion":"Colocar el eje primario en la pieza de unión.<br><br>Créditos de la foto: Heartman [CC BY-NC 3.0 (https://creativecommons.org/licenses/by-nc/3.0)] via Thingiverse" ,
    "Image": "images/Taller4/5.jpg"
    },
    {
    "Encabezado": "<br><b> Paso 2.4: Conexión mecánica. </br></b>",
    "Descripcion":"Colocar dos servo motores en el eje secundario y conectarla a la estructura ya elaborada." ,
    "Image": "images/Taller4/9.jpg"
    },
    {
    "Encabezado": "<br><b> Paso 2.5: Conexión mecánica. </br></b>",
    "Descripcion": "Colocar un servo motor en la base de la pinza ." ,
    "Image": "images/Taller4/10.jpg"
    },
    {
    "Encabezado": "<br><b> Paso 2.6: Conexión mecánica. </br></b>",
    "Descripcion": "Conectar la base de la pinza  y la pinza ." ,
    "Image": "images/Taller4/11.jpg"
    },
    {
    "Encabezado" :"<br><b> Paso 3: Conexión electrónica. </br></b>",
    "Descripcion": "Una vez que se termina de armar el brazo, se debe proceder a realizar las conexiones respectivas a la parte electrónica, esto es: conectar el Arduino, a los servos y al módulo bluetooth. Para ello, se debe conectar los respectivos elementos como se muestra en la figura ",
    "Image": "images/Taller4/brazo_fritzing.png"
    },
    {
    "Encabezado" :"<br><b> Paso 4: Programación. </br></b>",
    "Descripcion": " <pre><code>#include <SoftwareSerial.h>\n #include <Servo.h>\n SoftwareSerial BT(10,11);  // RX y TX \n Servo servo; \n Servo servo2; \n Servo servo3; \n Servo servo4; \n const int motor = 6; \n const int motor2 = 5; \n const int motor3 = 4; \n const int motor4 = 3; \n const int cambio = 5; \n int pos_inicial=90; \n int pos=0; \n char command; \n\n void setup() \n{ \n\t   servo.attach(motor); // motor1 --> pin 6 base \n\t   servo.write(pos_inicial); \n\t   servo2.attach(motor2); // motor2 --> pin 5 ante-ante-pinza \n\t   servo2.write(pos_inicial); \n\t   servo3.attach(motor3); // motor3 --> pin 4 ante-pinza \n\t   servo3.write(pos_inicial); \n\t   servo4.attach(motor4); // motor4 --> pin 3 pinza \n\t   servo4.write(pos_inicial); \n\t   BT.begin(9600); \n\t   Serial.begin(9600); \n}\n\n  // DEBUG\n void loop() \n{\n \tif(BT.available() > 0)\n\t{ \n\t\tcommand = BT.read(); \n\t\tswitch(command)\n\t\t{\n\t\t\t //SERVO 1 \n\t\t\tcase 'q': \n\t\t\t\tpos = servo.read();\n\t\t\t\tpos= pos+cambio; \n\t\t\t\tservo.write(pos); \n\t\t\tbreak; \n\t\t\tcase 'a': \n\t\t\t\tpos = servo.read(); \n\t\t\t\tpos = pos-cambio; \n\t\t\t\tservo.write(pos); \n\t\t\tbreak; //SERVO 2 \n\t\t\tcase 'w': \n\t\t\t\tpos = servo2.read(); \n\t\t\t\tpos= pos+cambio; \n\t\t\t\tservo2.write(pos); \n\t\t\tbreak; \n\t\t\tcase 's': \n\t\t\t\tpos = servo2.read(); \n\t\t\t\tpos= pos-cambio; \n\t\t\t\tservo2.write(pos); \n\t\t\tbreak; \n\t\t\t//SERVO 3 \n\t\t\tcase 'e': \n\t\t\t\tpos = servo3.read(); \n\t\t\t\tpos= pos+cambio; \n\t\t\t\tservo3.write(pos); \n\t\t\tbreak; \n\t\t\tcase 'd': \n\t\t\t\tpos = servo3.read(); \n\t\t\t\tpos= pos-cambio; \n\t\t\t\tservo3.write(pos); \n\t\t\tbreak; \n\t\t\t//SERVO 4 \n\t\t\tcase 'r': \n\t\t\t\tpos = servo4.read(); \n\t\t\t\tpos= pos+cambio; \n\t\t\t\tservo4.write(pos); \n\t\t\tbreak; \n\t\t\tcase 'f': \n\t\t\t\tpos = servo4.read(); \n\t\t\t\tpos= pos-cambio; \n\t\t\t\tservo4.write(pos); \n\t\t\tbreak;\n\t\t } \n\t\t\t//DEBUG \n\t\tSerial.print(\"Dato recibido: \"); \n\t\tSerial.println(command);\n\t}\n} </pre></code>",
    "Image": "images/no-image.png"
    }
    ]
  },

  "Carro" : {
    "Id": "7",
    "Descripcion": "<br><b> Metas </br></b> &bull; Incorporar la robótica en los centros educativos como una herramienta para incentivar a los y las estudiantes a interesarse en las áreas de ciencia y tecnología de una forma eficiente y motivadora que les permita obtener un aprendizaje más significativo. <br> &bull; Mostrar los componentes básicos del carro y su funcionamiento. <br> &bull; Brindar los contenidos necesarios para que los y las alumnas se capaciten de una mejor manera para un futuro cada vez más tecnológico. <br> <br><b> Funcionamiento </b></br> Este taller tiene la finalidad de brindar tanto al docente como al alumnado de educación básica algunas herramientas esenciales y necesarias para la incorporación de la ciencia y tecnología en los métodos de enseñanza. Ya que el vehículo propuesto es controlado de manera remota este taller puede ser el primer paso hacia la construcción de robots de busqueda." ,
    "Imagen": "images/carro.jpeg",
    "CantidadComponentes": ["1","1","2","2","1","16","1","1","1","1","1","1","2","15"],
    "Components": [
      "Arduino Uno",
      "Servomotor",
      "Motor DC con su rueda",
      "Porta baterías",
      "Shield motor",
      "Cable",
      "Módulo Bluetooth",
      "Sensor ultrasónico",
      "Soporte 1 del sensor ultrasónico",
      "Soporte 2 del sensor ultrasónico",
      "Rueda loca",
      "Chasís",
      "Baterías AA",
      "Tornillos M3"
    ],
    "Pasos": [
      {
        "Encabezado": "Paso 1: Conexión del shield motor y control de los motores DC.<br>",
        "Descripcion": "La conexión es muy sencilla, se dispone de 2 conectores en M1, M2, M3 y M4 para el vivo y el neutro del motor. Solo se debe conectar al que se desee y listo. Se de tener cuidado con la polaridad. Si es conectado al revés, es decir el vivo en el neutro y viceversa, cuando el comando sea que vaya hacia adelante irá hacia atrás. Lo mismo sucedería con la colocación del motor.",
        "Image": "images/Taller5/ConexionShieldMotor.jpg"
      },
      {
        "Encabezado": "Paso 1.1: Código<br>",
        "Descripcion":  "Para controlar el motor se necesita utilizar el siguiente código:<br><br> <pre><code> <i>// Incluir librerias y crear una instancia del objeto Adafruit_MotorShield.\n // Seleccionar el puerto M1 , M2 , M3 or M4. En este caso , M1</i></pre></code> <pre><code>Adafruit_DCMotor * myMotor = AFMS . getMotor (1);</pre></code> <pre><code><i>// Tambien se puede conectar otro motor en el puerto M2 con:\n // (Adafruit_DCMotor * myOtherMotor = AFMS . getMotor (2);).\n // En esta ocasion utilizamos motores DC por lo tanto tenemos que hacer uso del metodo\n // AFMS .getMotor (n), donde n es el numero de puerto donde este conectado el motor.\n // Para M1 sera 1, M2 sera 2, M3 sera 3 y M4 sera 4.</i></pre></code> <pre><code> void setup ()<br> { </pre></code>  <pre><code> Serial . begin (9600) ; </pre></code> <pre><code> Serial . println (“ Adafruit Motorshield v2 - DC Motor test !“); </code></pre> <pre><code> AFMS . begin (); </pre></code> <code><pre><i> // Las tres primeras lineas son para iniciar el monitor serie e iniciar el Adafruit Motor Shield con la\n // frecuencia por defecto . 1.6 KHz.\n // Recuerda que puedes cambiar dicha frecuencia por otra . 1KHz (AFMS . begin (1000) ;).\n // Lo siguiente que hace es indicar la velocidad de inicio con el metodo setSpeed ( velocidad ).\n // La velocidad debe ser un entero de 8- bit es decir , solo admite valores de 0 a 255.</i></pre></code> <pre><code> myMotor -> setSpeed (150) ; </code></pre>  <code><pre><i> // Con el metodo run( direccion ) le decimos para donde tiene que moverse . \n// Direccion puede tomar tres valores FOWARD = rotacion hacia adelante , \n// REVERSE = rotacion en sentido contrario, \n// REALEASE = parar la rotacion , no es un freno , simplemente corta la corriente del motor.  </i></pre></code> <pre><code> myMotor ->run( FORWARD ); <i> // turn on motor </i> </code></pre> <pre><code><i>// En la funcion loop () hace una serie de movimientos utilizando los metodos setSpeed ( )\n // para la velocidad y run( ) para indicar hacia donde se tiene que mover .\n // Los dos primeros bucles for ( ) hace un movimiento hacia adelante ( FORWARD )\n // con una aceleracion progresiva y luego una desaceleracion progresiva .\n // Cambia la direccion hacia atras ( BACKWARD ) y hace lo mismo , aceleracion y desaceleracion progresiva .\n // Por ultimo para el motor ( RELEASE ). </i></pre></code> <pre><code> void loop <br> () { </code></pre> <pre><code> \tuint8_t i; </code></pre> <pre><code> \tSerial . print (“ tick “); </code></pre> <pre><code> \tmyMotor ->run( FORWARD ); </code></pre> <pre><code> \tfor (i = 0; i < 255; i ++) { </code></pre> <pre><code> \t\tmyMotor -> setSpeed (i); </code></pre> <pre><code> \t\tdelay (10) ; \t} </code></pre> <pre><code> \tfor (i = 255; i != 0; i --) { </pre></code> <pre><code> \t\tmyMotor -> setSpeed (i); </pre></code> <pre><code> \t\tdelay (10) ; </pre></code> <pre><code> \t} </pre></code> <pre><code> \tSerial . print ( “tock“); </pre></code> <pre><code> \tmyMotor ->run( BACKWARD ); </pre></code> <pre><code> \tfor (i = 0; i < 255; i ++) { </pre></code> <pre><code> \t\tmyMotor -> setSpeed (i); </pre></code> <pre><code> \t\tdelay (10); </pre></code> <pre><code> \t} </pre></code> <pre><code> \tfor (i = 255; i != 0; i --) {  </pre></code> <pre><code> \t\tmyMotor -> setSpeed (i); </pre></code> <pre><code> \t\tdelay (10) ; </pre></code> <pre><code>  \t} </pre></code> <pre><code> \tSerial . print (“ tech “); </pre></code> <pre><code> \tmyMotor ->run( RELEASE ); </pre></code> <pre><code> \tdelay (1000) ; </pre></code> <pre><code> } </pre></code>",
        "Image": "images/no-image.png"
      },
      {
        "Encabezado": "Paso 2: Construcción mecánica del carro<br>",
        "Descripcion": "En esta sección se dará el paso a paso de como ensamblar el carro.<br><br>Créditos de la foto y diseño: rtheiss [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)] via Thingiverse",
        "Image": "images/Taller5/Carro1.jpg"
      },
      {
        "Encabezado": "Paso 2.1: Construcción mecánica del carro<br>",
        "Descripcion": "Como se ilustra en la imagen se deben unir al sensor ultrasónico con el soporte 2.",
        "Image": "images/Taller5/paso21.jpg"
      },{
        "Encabezado": "Paso 2.2: Construcción mecánica del carro<br>",
        "Descripcion": "Ahora se debe conectar el soporte 2 con el soporte 1 y pegarlo al servomotor (con el servomotor ya unido al chasís).<br><br>Créditos de la foto y diseño: rtheiss [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)] via Thingiverse",
        "Image": "images/Taller5/Carro2.jpg"
      },{
        "Encabezado": "Paso 2.3: Construcción mecánica del carro<br>",
        "Descripcion": "Como se muestra en la imagen se debe tomar el motor dc y acoplarlo al chasís.",
        "Image": "images/Taller5/paso23.jpg"
      },
      {
        "Encabezado": "Paso 2.4: Construcción mecánica del carro<br>",
        "Descripcion": "Seguidamente con un tornillo se ensambla la rueda loca en la parte trasera del chasís.",
        "Image": "images/Taller5/paso24.jpg"
      },
      {
        "Encabezado": "Paso 2.5: Construcción mecánica del carro<br>",
        "Descripcion": "Con ayuda de tornillos o bandas sujetadoras unir el Shiel motor (ensamblado al Arduino) con la parte frontal del chasís.",
        "Image": "images/Taller5/Carro1.jpg"
      },
      {
        "Encabezado": "Paso 2.6: Construcción mecánica del carro<br>",
        "Descripcion": "Con ayuda de bandas sujetadoras unir el porta baterías con el chasís justo detrás de los motores.",
        "Image": "images/Taller5/Carro2.jpg"
      },
      {
        "Encabezado": "Paso 3: Conexión eléctrica del carro</br></b>",
        "Descripcion": "Para esta secciónn se necesitara hacer uso de los conocimientos adquiridos en los talleres anteriores y en este taller (Parte 1). El carro que se propone es un dispositivo móvil de tres ruedas con sensor ultrasónico, dos de las ruedas son impulsados por un motor DC (un motor por cada rueda), mientras que la tercer rueda sería una rueda loca. Los motores del vehículo serán controlados desde una aplicación la cual les dirá a los motores cuando girar o no y en qué sentido hacerlo, para esto se hará uso de un módulo bluetooth que comunicará al teléfono con el Arduino y un puente H (integrado en el shield motor) que defina la dirección de giro de las ruedas.",
        "Image": "images/Taller5/ConexionCarro.png"
      },
      {
        "Encabezado": "Paso 3.1: El código requerido para controlar el carro es el siguiente:<br>",
        "Descripcion": "<pre><code> # include < SoftwareSerial .h> </pre></code> <pre><code> # include <Wire .h> </pre></code> <pre><code> # include < Adafruit_MotorShield .h> </pre></code> <pre><code> Adafruit_MotorShield AFMS = Adafruit_MotorShield (); </pre></code> <pre><code> Adafruit_DCMotor * motor1 = AFMS . getMotor (1); </pre></code> <pre><code> Adafruit_DCMotor * motor2 = AFMS . getMotor (2); </pre></code> <pre><code> SoftwareSerial BT (10 ,11) ; // RX y TX </pre></code> <pre><code> char command ; </pre></code> <pre><code> void setup () { </pre></code> <pre><code> \tBT. begin (9600) ; </pre></code> // Serial . begin (9600) ; // DEBUG <pre><code> AFMS . begin (); </pre></code> // Usa la frecuencia por defecto de 1.6KHz ó puedes cambiar dicha frecuencia por otra . 1KHz (AFMS . begin (1000) ;) <pre><code> \tmotor1 -> setSpeed (150) ;  </pre></code> <pre><code> \tmotor2 -> setSpeed (150) ; </pre></code> // Set the speed to start , from 0 ( off ) to 255 ( max speed ) <pre><code> \tmotor1 ->run( FORWARD ); </pre></code> <pre><code> \tmotor2 ->run( FORWARD ); </pre></code> // turn on motor <pre><code> \tmotor1 ->run( RELEASE ); </pre></code> <pre><code> \tmotor2 ->run( RELEASE ); </pre></code> <pre><code> } </pre></code> <pre><code> void loop () { </pre></code> <pre><code> \tif(BT. available () > 0){ </pre></code> <pre><code> \t\tcommand = BT. read ();  </pre></code> <pre><code> \t\tmotor1 ->run( RELEASE ); </pre></code> <pre><code> \t\tmotor2 ->run( RELEASE ); </pre></code> <pre><code> \t\tswitch ( command ){ </pre></code> <pre><code> \t\tcase 'u ': </pre></code> <pre><code> \t\t\tmotor1 ->run( FORWARD ); </pre></code> <pre><code> \t\t\tmotor2 ->run( FORWARD ); </pre></code> <pre><code> \t\t\tbreak ; </pre></code> <pre><code> \t\tcase 'd ': </pre></code> <pre><code> \t\t\tmotor1 ->run( BACKWARD ); </pre></code> <pre><code> \t\t\tmotor2 ->run( BACKWARD ); </pre></code> <pre><code> \t\t\tbreak ; </pre></code> <pre><code> \t\tcase 'l ': </pre></code> <pre><code> \t\t\tmotor1 ->run( FORWARD ); </pre></code> <pre><code> \t\t\tmotor2 ->run( BACKWARD ); </pre></code> <pre><code> \t\t\tbreak ; </pre></code> <pre><code> \t\tcase 'r ': </pre></code> <pre><code> \t\t\tmotor1 ->run( BACKWARD ); </pre></code> <pre><code> \t\t\tmotor2 ->run( FORWARD ); </pre></code> <pre><code> \t\t\tbreak ; </pre></code> <pre><code> \t\tcase 's ': </pre></code> <pre><code> \t\t\tmotor1 ->run( RELEASE ); </pre></code> <pre><code> \t\t\tmotor2 ->run( RELEASE ); </pre></code> <pre><code> \t\t\tbreak ; </pre></code> <pre><code> \t} </pre></code> <pre><code>// DEBUG.</pre></code> <pre><code> // Serial . print (“ Dato recibido : “); </pre></code> <pre><code> // Serial . println ( command );</pre></code> <pre><code> } </pre></code> <pre><code> }. </pre></code>",
        "Image": "images/no-image.png"
      }
    ]
  }
  }